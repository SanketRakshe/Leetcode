class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        //push all word of wordlist push it into a set for deletion makes easier and in less time complexity..
        unordered_set st(wordList.begin(), wordList.end());
        //Making a Queue for storing {word, steps}
        queue<pair<string, int>> q;
        q.push({beginWord, 1});
        st.erase(beginWord);

        while(!q.empty()) {
            string word = q.front().first;
            int steps = q.front().second;
            q.pop();
            //if the first occurence of word found then return steps only
            if(word == endWord) {
                return steps;
            }
            // Now, replace each character of ‘word’ with char
            // from a-z then check if ‘word’ exists in wordList.

            //hat
            for(int i = 0; i < word.size(); i++) {
                char original = word[i];
                //aat
                //bat
                //cat
                for(char ch = 'a'; ch <= 'z'; ch++) {
                    word[i] = ch;
                    // check if it exists in the set and push it in the queue.
                    if(st.find(word) != st.end()) {
                        st.erase(word);
                        q.push({word, steps + 1 });
                    }
                }
                word[i] = original;
            }
        }
        //if There is a no transformation are available then return 0
        return 0;
    }
};

/*
*Time Complexity: O(N * M * 26)
*Space Complexity:  O( N ) 
*/
