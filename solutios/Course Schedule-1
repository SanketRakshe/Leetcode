class Solution {
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        
        //Build a adjacency list
        vector<int> adj[numCourses];
        int n = prerequisites.size();
        for(int i = 0; i < n; i++) {
            adj[prerequisites[i][1]].push_back(prerequisites[i][0]);
        }

        //calcu;ate indegree
        vector<int> indegree(numCourses, 0);
        for(int i = 0; i < numCourses; i++) {
            for(auto it: adj[i]) {
                indegree[it]++;
            }
        }

        queue<int> q;
        //store 0 indexes in q as per topo sort
        for(int i = 0; i < numCourses; i++) {
            if(indegree[i] == 0) {
                q.push(i);
            }
        }

        vector<int> topo;
        while(!q.empty()) {
            int node = q.front();
            q.pop();
            topo.push_back(node);

            for(auto it: adj[node]) {
                indegree[it]--;
                if(indegree[it] == 0) {
                    q.push(it);
                }
            }
        }
        if(topo.size() == numCourses) return true;
        return false;
    }
};
/*
*Time Complexity: O(V+E)
*Space Complexity: O(N) + O(N) ~ O(2N)
*/
