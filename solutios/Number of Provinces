class Solution {
private:
    void dfs(int node, vector<int> &vis, vector<int>adjLS[]) {
        vis[node] = 1;
        for(auto it: adjLS[node]) {
            if(!vis[it]) {
                vis[it] = 1;
                dfs(it, vis, adjLS);
            }
        }
    }
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();

        vector<int> adjLS[n];
        
        //Convert adjacency matrix to the adjacency list
        for(int i = 0; i<n; i++) {
            for(int j = 0; j <n; j++) {
                if(isConnected[i][j] == 1 && i!=j) {
                    adjLS[i].push_back(j);
                    adjLS[j].push_back(i);
                }
            }
        }

        //call dfs for each vertex if not visited
        vector<int> vis(n, 0);
        int cnt = 0;
        for(int i = 0; i<n; i++) {
            if(!vis[i]) {
                cnt++;
                dfs(i, vis, adjLS);
            }
        }
        //return number of times dfs is called..
        return cnt;
    }
};

/*
*Time Complexity = O(N) + O(V+2E)
*Space Complexity = O(N)
*/
